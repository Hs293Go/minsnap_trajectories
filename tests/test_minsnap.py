"""
Tests for the minsnap trajectory generator

Copyright Â© 2024 Hs293Go

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

---

These tests uses trajectory data generated by the following alternative minsnap
algorithms:

- https://github.com/icsl-Jeon/traj_gen-matlab
- https://github.com/symao/minimum_snap_trajectory_generation

"""

import random

import numpy as np
import pytest
from scipy import io

import minsnap_trajectories as ms


@pytest.fixture(name="test_directory", scope="module")
def _(request):
    """Return the directory of the currently running test script"""

    return request.path.parent


SMALL_NUM_TRIALS = 100


def test_invalid_references():

    # Trajectory point times too close
    for _ in range(SMALL_NUM_TRIALS):
        t = random.uniform(0.0, 100.0)
        dt = random.uniform(-1e-9, 1e-9)
        refs = [
            ms.Waypoint(t, np.array([0.0, 0.0])),
            ms.Waypoint(t + dt, np.array([1.0, 0.0])),
        ]

        with pytest.raises(ValueError):
            _ = ms.generate_trajectory(refs, 5, idx_minimized_orders=3)

    # Negative time
    refs = [
        ms.Waypoint(0.0, np.array([0.0, 0.0])),
        ms.Waypoint(-1.0, np.array([1.0, 0.0])),
    ]

    with pytest.raises(ValueError):
        _ = ms.generate_trajectory(refs, 5, idx_minimized_orders=3)

    # Negative time
    refs = [
        ms.Waypoint(0.0, np.array([1.0, 0.0])),
        ms.Waypoint(1.0, np.array([1.0, 0.0])),
    ]

    _ = ms.generate_trajectory(refs, 5, idx_minimized_orders=3)


def test_single_ref():
    # The data for this test is generated by running demo1_minimum_snap_simple.m

    refs = [
        ms.Waypoint(0.0000000000000000, np.array([0.0, 0.0])),
    ]

    t_ref, durations, coeffs = ms.generate_trajectory(
        refs,
        degree=5,
        idx_minimized_orders=3,
    )

    assert t_ref == refs[0].time
    assert durations.size == 0
    assert coeffs.size == 0


def test_canned_symao_simple(test_directory):
    # The data for this test is generated by running demo1_minimum_snap_simple.m

    refs = [
        ms.Waypoint(0.0000000000000000, np.array([0.0, 0.0])),
        ms.Waypoint(0.5400960100096803, np.array([1.0, 2.0])),
        ms.Waypoint(1.3039071123489652, np.array([2.0, -1.0])),
        ms.Waypoint(3.5307800095935304, np.array([4.0, 8.0])),
        ms.Waypoint(5.0000000000000000, np.array([5.0, 2.0])),
    ]

    polys = ms.generate_trajectory(
        refs,
        degree=5,
        idx_minimized_orders=3,
        algorithm="constrained",
    )

    data = io.loadmat(test_directory / "data/symao_simple.mat")
    # Cannot directly test polynomial coefficients since symao's version has no time
    # normalization
    kinematic_references = ms.compute_trajectory_derivatives(
        polys, data["sample_time"], 4
    )

    # Lower tolerance since MATLAB quadprog behaves differently from
    # scipy.optimize.minimize
    assert kinematic_references == pytest.approx(
        data["kinematic_references"], rel=1e-4, abs=1e-4
    )


def test_canned_symao_closed_form(test_directory):
    # The data for this test is generated by running demo1_minimum_snap_close_form.m

    refs = [
        ms.Waypoint(0.0000000000000000, np.array([0.0, 0.0])),
        ms.Waypoint(0.5400960100096803, np.array([1.0, 2.0])),
        ms.Waypoint(1.3039071123489652, np.array([2.0, -1.0])),
        ms.Waypoint(3.5307800095935304, np.array([4.0, 8.0])),
        ms.Waypoint(5.0000000000000000, np.array([5.0, 2.0])),
    ]

    polys = ms.generate_trajectory(
        refs,
        degree=5,
        idx_minimized_orders=3,
        algorithm="closed-form",
    )
    # Cannot directly test polynomial coefficients since symao's version has no time
    # normalization

    data = io.loadmat(test_directory / "data/symao_closed_form.mat")
    kinematic_references = ms.compute_trajectory_derivatives(
        polys, data["sample_time"], 4
    )

    assert kinematic_references == pytest.approx(data["kinematic_references"])


def test_canned_icsl_jeon(test_directory):
    # The data for this test is generated by running poly_example/main3D.m with the
    # following modifications
    #
    #   -% 2.2 LoosePin
    #   -passCube = [3 4.2 ; -3 -2 ; 1 2];
    #   -pin = struct('t',3,'d',0,'X',passCube);
    #   +pin = struct('t',ts(end),'d',1,'X',Xdot);
    #   +pTraj.addPin(pin);
    #   +pin = struct('t',ts(end),'d',2,'X',Xddot);
    #
    # Namely, we do not support inequality kinematic constraints, and we enforce
    # initial/terminal velocity and acceleration to be 0
    refs = [
        ms.Waypoint(0.0, np.array([0.0, 0.0, 0.0])),
        ms.Waypoint(2.0, np.array([2.0, -1.0, 2.0])),
        ms.Waypoint(4.0, np.array([5.0, 3.0, 4.0])),
        ms.Waypoint(7.0, np.array([7.0, -5.0, 5.0])),
    ]
    # icsl-Jeon's algorithm is tightly coupled with quadprog
    polys = ms.generate_trajectory(
        refs,
        degree=8,
        idx_minimized_orders=(2, 3),
        num_continuous_orders=5,
        algorithm="constrained",
    )

    data = io.loadmat(test_directory / "data/icsl_jeon_3d.mat")
    kinematic_references = ms.compute_trajectory_derivatives(
        polys, data["sample_time"], 4
    )
    assert kinematic_references == pytest.approx(
        data["kinematic_references"], abs=1e-5, rel=1e-5
    )
